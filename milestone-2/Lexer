import java_cup.runtime.Symbol;
import java.lang.System;
import java.util.*;
import java.io.*;
%%
%class Lexer

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
  return getSym(sym.EOF, null);
%eofval}
%char
%line
%state BACK_SLASH_STATE, DOCUMENT_STATE, ITEM_LIST_STATE, MATH_MODE_STATE, EQUATION_MODE_STATE, COMMAND_TEXT_STATE

%{
  String errorToken = "";
  int nItems = 0;
  //initialize  variables to be used by class
  LinkedList<Integer> previousStates;

  public void gotoState(int state) {
    previousStates.addLast(yy_lexical_state);
    yybegin(state);
  }

  public void exitState() {
    if (previousStates.isEmpty()) {
      //throw new Exception("what are you trying to do, man?");
    }
    //System.out.println(previousStates);
    yybegin(previousStates.removeLast());
  }

  public void exitState(int nExtraStatestoExit) {
    if (previousStates.isEmpty()) {
      //throw new Exception("what are you trying to do, man?");
    }
    for(int i=0; i < nExtraStatestoExit; i++) {
      previousStates.removeLast();
    }
    yybegin(previousStates.removeLast());
  }
  public Symbol getSym(int symVal, String token) {
    System.out.println("Token: " + token + " == " + symVal);
    return new Symbol(symVal, token);
  }
%}


%init{
//Add code to be executed on initialization of the lexer
  previousStates = new LinkedList<>();
%init}

%state back slash

BACK_SLASH=\\

%state comands with content non printable content
DOCUMENT_CLASS=(documentclass\{(.)+\})
PACKAGE=(usepackage\[(.)+\]\{(.)+\})
COMMENT=(%(.)*)
BEGIN_EQUATION=begin\{equation\}
BEGIN_ITEM_LIST=begin\{itemize\}
END_EQUATION=end\{equation\}
END_ITEM_LIST=end\{itemize\}
BEGIN=(begin\{.*\})
END=(end\{.*\})
COMMAND_TEXT=\{.*\}

%state  commands without content
MAKETITLE=(maketitle)

%state commands with content printable content
TITLE=(title)
SUBTITLE=(subtitle)
DATE=(date)
SECTION=(section)
TEXTBF=(textbf)

%state math mode stuff
MATH_START_END=\$
DIGIT=[0-9]+
OPERATOR=[-+*/^%!=|&]
ALPHA=[a-zA-Z_]
VARIABLE={ALPHA}({ALPHA}|{DIGIT})*
FUNCTION={VARIABLE}\({VARIABLE}(,[ ]{VARIABLE})*\)

%state equation stuff
LABEL=label\{.*\}


%state item list stuff


%state generic ones
TEXT=\{.+\}
BODY=[^%\{\}\[\]\n\\$]+
WHITESPACE=[ \n\t\f]
NO_WHITESPACE=[^ \n\t\f]


%%
<YYINITIAL, ITEM_LIST_STATE, EQUATION_MODE_STATE> {BACK_SLASH} {
  gotoState(BACK_SLASH_STATE);
}
<YYINITIAL, ITEM_LIST_STATE, EQUATION_MODE_STATE> {MATH_START_END} {
  gotoState(MATH_MODE_STATE);
  return getSym(sym.MATHMODE, yytext());
}
<YYINITIAL, ITEM_LIST_STATE, EQUATION_MODE_STATE> {COMMENT} {

}
<YYINITIAL> {BODY} {
  return getSym(sym.BODY, yytext());
}
<YYINITIAL> . {
}

<BACK_SLASH_STATE> {BACK_SLASH} {
  exitState();
  return getSym(sym.NEWLINE, '\\' + yytext());
}
<BACK_SLASH_STATE> {DOCUMENT_CLASS} {
  exitState();
  return getSym(sym.DOC_CLASS, '\\' + yytext());
}
<BACK_SLASH_STATE> {PACKAGE} {
  exitState();
  return getSym(sym.PACKAGE, '\\' + yytext());
}
<BACK_SLASH_STATE> {BEGIN_EQUATION} {
  gotoState(EQUATION_MODE_STATE);
  return getSym(sym.BEGIN, '\\' + yytext());
}
<BACK_SLASH_STATE> {BEGIN_ITEM_LIST} {
  nItems = 0;
  gotoState(ITEM_LIST_STATE);
  return getSym(sym.BEGIN, '\\' + yytext());
}

<BACK_SLASH_STATE> {BEGIN} {
  //gotoState(DOCUMENT_STATE);
  gotoState(YYINITIAL);
  return getSym(sym.BEGIN, '\\' + yytext());
}
<BACK_SLASH_STATE> {END_ITEM_LIST} {
  exitState(2);
  if(nItems != 0) {
    return getSym(sym.END, '\\' + yytext());
  } else {
    return getSym(sym.ERROR, "Line: " + yyline + " Item list with missing \\item");
  }
}
<BACK_SLASH_STATE> {END} {
  exitState(2);
  return getSym(sym.END, '\\' + yytext());
}
<BACK_SLASH_STATE> {TITLE} {
  gotoState(COMMAND_TEXT_STATE);
  return getSym(sym.TITLE, '\\' + yytext());
}
<BACK_SLASH_STATE> {SUBTITLE} {
  gotoState(COMMAND_TEXT_STATE);
  return getSym(sym.SUB_TITLE, '\\' + yytext());
}
<BACK_SLASH_STATE> {DATE} {
  gotoState(COMMAND_TEXT_STATE);
  return getSym(sym.DATE, '\\' + yytext());
}
<BACK_SLASH_STATE> {SECTION} {
  gotoState(COMMAND_TEXT_STATE);
  return getSym(sym.SECTION, '\\' + yytext());
}
<BACK_SLASH_STATE> {TEXTBF} {
  gotoState(COMMAND_TEXT_STATE);
  return getSym(sym.BF, '\\' + yytext());
}
<BACK_SLASH_STATE> {MAKETITLE} {
  exitState();
  return getSym(sym.MAKE, '\\' + yytext());
}

<BACK_SLASH_STATE> {LABEL} {
  exitState();
  return getSym(sym.LABEL, '\\' + yytext());
}


<BACK_SLASH_STATE> {WHITESPACE} {
  exitState();
  Symbol s = getSym(sym.ERROR,
  "Line: " + (yyline + 1)
  + " Undefined control sequence: "
  + '\\' + errorToken);
  errorToken = "";
  return s;
}

<BACK_SLASH_STATE> {NO_WHITESPACE} {
  errorToken += yytext();
}

<COMMAND_TEXT_STATE> {COMMAND_TEXT} {
  exitState(1);
  return getSym(sym.TEXT, yytext());
}

<ITEM_LIST_STATE> ^[\\]item[ ] {
  nItems++;
  return getSym(sym.ITEM, yytext());
}
<ITEM_LIST_STATE> [^$\n\\]+ {
  return getSym(sym.BODY, yytext());
}

<EQUATION_MODE_STATE> {FUNCTION} {
  return getSym(sym.FUNC, yytext());
}

<MATH_MODE_STATE> {MATH_START_END} {
  exitState();
  return getSym(sym.MATHMODE, yytext());
}
<MATH_MODE_STATE, EQUATION_MODE_STATE> {DIGIT} {
  return getSym(sym.NM, yytext());
}
<MATH_MODE_STATE, EQUATION_MODE_STATE> {VARIABLE} {
  return getSym(sym.VAR, yytext());
}
<MATH_MODE_STATE, EQUATION_MODE_STATE> {OPERATOR} {
  return getSym(sym.OPERATOR, yytext());
}


<YYINITIAL, BACK_SLASH_STATE, ITEM_LIST_STATE, MATH_MODE_STATE, EQUATION_MODE_STATE> [\r]?[\n] {
  //System.out.println("new line");
}
