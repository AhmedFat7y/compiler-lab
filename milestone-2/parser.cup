import java_cup.runtime.*;
import java.lang.reflect.*;
import java.util.*;

parser code
{:
    @Override
    public void syntax_error(Symbol cur_token) {
        System.out.println("syntax_error here: " + cur_token.value);
        List<Integer> l = expected_token_ids();
        System.out.println(l);
        for (int n : l) {
          System.out.println(n);
        }
        super.syntax_error(cur_token);
    }
//    report_fatal_error
//    @Override
//    public void unrecovered_syntax_error(Symbol cur_token) {
//        System.out.println("syntax_error " + cur_token.getClass());
//    }

:}

/* Terminals (tokens returned by the scanner). */
terminal	BF, TITLE, TEXT, SECTION, LABEL, OPERATOR;
terminal  DATE, BEGIN, NM, NEWLINE, SUB_TITLE, MATHMODE;
terminal  BODY, END, PACKAGE, FUNC, ERROR, VAR, MAKE;
terminal  DOC_CLASS, ITEM;

/* Non-terminals */
nonterminal	String	 file, document, starters, content;




/* The grammar */

file ::= DOC_CLASS PACKAGE BEGIN:t1 document:d END:t2
			  {:RESULT = "" + d;:}
			| error
        {:RESULT = "" + "parse error";:};

document ::= starters:s content:c
            {:RESULT = "" + s + '\n' + c;:}
          | error
            {:RESULT = "" + "parse error";:};

starters ::= TITLE TEXT:title DATE TEXT:date MAKE
            {:RESULT = "" + title + '\n' + date + '\n';:}
          | error
            {:RESULT = "" + "parse error";:};

content ::= SECTION TEXT:sectionTitle
            {:RESULT = "" + sectionTitle + '\n';:}
          | BODY:b
            {:RESULT = "" + b;:}
          | NEWLINE
            {:RESULT = "" + "\n newline \n";:}
          | error
            {:RESULT = "" + "parse error";:};
